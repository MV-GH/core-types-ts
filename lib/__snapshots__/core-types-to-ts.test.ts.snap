// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`core-types-to-ts and-type as empty interface with 1 heritage 1`] = `
"export interface foo extends bar {
}

export interface bar {
    b: number;
}
"
`;

exports[`core-types-to-ts and-type as empty interface with 2 heritage 1`] = `
"export interface foo extends bar, baz {
}

export interface bar {
    b: number;
}

export interface baz {
    z: boolean;
}
"
`;

exports[`core-types-to-ts and-type as non-empty interface with 1 heritage 1`] = `
"export interface foo extends bar {
    f: string;
}

export interface bar {
    b: number;
}
"
`;

exports[`core-types-to-ts and-type as non-empty interface with 2 heritage 1`] = `
"export interface foo extends bar, baz {
    f: string;
}

export interface bar {
    b: number;
}

export interface baz {
    z: boolean;
}
"
`;

exports[`core-types-to-ts and-type that cannot be an interface because non-object ref 1`] = `
"export type foo = {
    f?: string;
} & bar;

export type bar = null;
"
`;

exports[`core-types-to-ts complex type 1`] = `
{
  "convertedTypes": [
    "foo",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

export declare interface foo {
    bar?: string;
    baz: number | {
        [key: string]: boolean;
    };
    bak: {
        [key: string]: unknown;
    };
    tupleWithAdditionals: [
        string,
        ...number[]
    ];
    tupleWithObjectAdditionals: [
        string,
        ...{
            x?: User;
        }[]
    ];
}
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts should add user package 1`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts on behalf of my-package, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 *  - {@link https://my-user-package.com}
 */

export type foo = string;
"
`;

exports[`core-types-to-ts should not add descriptive header 1`] = `
"/* tslint:disable */
/* eslint-disable */


export type foo = string;
"
`;

exports[`core-types-to-ts should write annotations properly 1`] = `
{
  "convertedTypes": [
    "User",
    "ChatLine",
    "Thingy",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

/**
 * User type
 *
 * This type holds the user information, such as name
 *
 * @example
 *     { name: "Joe" }
 *
 * @default
 *     { user: "" }
 *
 * @see http://username
 */
export interface User {
    /**
     * The real name
     *
     * Must be a valid name, not *\\/
     */
    name: string;
}

/** A chat line */
export interface ChatLine {
    /** User ref */
    user: User;
    /**
     * @example
     *     This is a line
     */
    line: string;
}

/** Thing ref */
export type Thingy = /**
 * Thing is the preferred type
 *
 * @see The Thing documentation
 */
Thing | /** Just a number */
number;
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts simple string union of separate types 1`] = `
{
  "convertedTypes": [
    "bar",
    "foo",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

export type bar = "bar";

export type foo = bar | ("foo" | "baz");
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts simple string union type as declaration 1`] = `
{
  "convertedTypes": [
    "foo",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

export declare type foo = "foo" | "bar" | "baz";
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts simple type 1`] = `
{
  "convertedTypes": [
    "foo",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

export type foo = string;
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts simple type as declaration 1`] = `
{
  "convertedTypes": [
    "foo",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

export declare type foo = string;
",
  "notConvertedTypes": [],
}
`;

exports[`core-types-to-ts used in readme 1`] = `
{
  "convertedTypes": [
    "User",
    "ChatLine",
  ],
  "data": "/* tslint:disable */
/* eslint-disable */
/**
 * This file is generated by core-types-ts, DO NOT EDIT.
 * For more information, see:
 *  - {@link https://github.com/grantila/core-types-ts}
 */

/**
 * User type
 *
 * This type holds the user information, such as name
 */
export interface User {
    /** The real name */
    name: string;
}

/** A chat line */
export interface ChatLine {
    user: User;
    line: string;
}
",
  "notConvertedTypes": [],
}
`;
